//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.5.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Collections.Generic;
using DB_A4D6F8_AqarPress.Data.EntityClasses;
using DB_A4D6F8_AqarPress.Data.HelperClasses;
using DB_A4D6F8_AqarPress.Data.RelationClasses;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace DB_A4D6F8_AqarPress.Data.FactoryClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>general base class for the generated factories</summary>
	[Serializable]
	public partial class EntityFactoryBase2<TEntity> : EntityFactoryCore2
		where TEntity : EntityBase2, IEntity2
	{
		private readonly DB_A4D6F8_AqarPress.Data.EntityType _typeOfEntity;
		private readonly bool _isInHierarchy;

		/// <summary>CTor</summary>
		/// <param name="entityName">Name of the entity.</param>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <param name="isInHierarchy">If true, the entity of this factory is in an inheritance hierarchy, false otherwise</param>
		public EntityFactoryBase2(string entityName, DB_A4D6F8_AqarPress.Data.EntityType typeOfEntity, bool isInHierarchy) : base(entityName)
		{
			_typeOfEntity = typeOfEntity;
			_isInHierarchy = isInHierarchy;
		}
		
		/// <inheritdoc/>
		public override IEntityFields2 CreateFields() { return ModelInfoProviderSingleton.GetInstance().GetEntityFields(this.ForEntityName); }
		
		/// <inheritdoc/>
		public override IEntity2 CreateEntityFromEntityTypeValue(int entityTypeValue) {	return GeneralEntityFactory.Create((DB_A4D6F8_AqarPress.Data.EntityType)entityTypeValue); }

		/// <inheritdoc/>
		public override IRelationCollection CreateHierarchyRelations(string objectAlias) { return ModelInfoProviderSingleton.GetInstance().GetHierarchyRelations(this.ForEntityName, objectAlias); }

		/// <inheritdoc/>
		public override IEntityFactory2 GetEntityFactory(object[] fieldValues, Dictionary<string, int> entityFieldStartIndexesPerEntity) 
		{
			return (IEntityFactory2)ModelInfoProviderSingleton.GetInstance().GetEntityFactory(this.ForEntityName, fieldValues, entityFieldStartIndexesPerEntity) ?? this;
		}
		
		/// <inheritdoc/>
		public override IPredicateExpression GetEntityTypeFilter(bool negate, string objectAlias) {	return ModelInfoProviderSingleton.GetInstance().GetEntityTypeFilter(this.ForEntityName, objectAlias, negate);	}
						
		/// <inheritdoc/>
		public override IEntityCollection2 CreateEntityCollection()	{ return new EntityCollection<TEntity>(this); }
		
		/// <inheritdoc/>
		public override IEntityFields2 CreateHierarchyFields() 
		{
			return _isInHierarchy ? new EntityFields2(ModelInfoProviderSingleton.GetInstance().GetHierarchyFields(this.ForEntityName), ModelInfoProviderSingleton.GetInstance(), null) : base.CreateHierarchyFields();
		}
		
		/// <inheritdoc/>
		protected override Type ForEntityType { get { return typeof(TEntity); } }
	}

	/// <summary>Factory to create new, empty AdEntity objects.</summary>
	[Serializable]
	public partial class AdEntityFactory : EntityFactoryBase2<AdEntity> 
	{
		/// <summary>CTor</summary>
		public AdEntityFactory() : base("AdEntity", DB_A4D6F8_AqarPress.Data.EntityType.AdEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new AdEntity(fields); }
	}

	/// <summary>Factory to create new, empty AreaEntity objects.</summary>
	[Serializable]
	public partial class AreaEntityFactory : EntityFactoryBase2<AreaEntity> 
	{
		/// <summary>CTor</summary>
		public AreaEntityFactory() : base("AreaEntity", DB_A4D6F8_AqarPress.Data.EntityType.AreaEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new AreaEntity(fields); }
	}

	/// <summary>Factory to create new, empty AttachmentEntity objects.</summary>
	[Serializable]
	public partial class AttachmentEntityFactory : EntityFactoryBase2<AttachmentEntity> 
	{
		/// <summary>CTor</summary>
		public AttachmentEntityFactory() : base("AttachmentEntity", DB_A4D6F8_AqarPress.Data.EntityType.AttachmentEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new AttachmentEntity(fields); }
	}

	/// <summary>Factory to create new, empty CategoryEntity objects.</summary>
	[Serializable]
	public partial class CategoryEntityFactory : EntityFactoryBase2<CategoryEntity> 
	{
		/// <summary>CTor</summary>
		public CategoryEntityFactory() : base("CategoryEntity", DB_A4D6F8_AqarPress.Data.EntityType.CategoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new CategoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty DeveloperEntity objects.</summary>
	[Serializable]
	public partial class DeveloperEntityFactory : EntityFactoryBase2<DeveloperEntity> 
	{
		/// <summary>CTor</summary>
		public DeveloperEntityFactory() : base("DeveloperEntity", DB_A4D6F8_AqarPress.Data.EntityType.DeveloperEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new DeveloperEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProjectEntity objects.</summary>
	[Serializable]
	public partial class ProjectEntityFactory : EntityFactoryBase2<ProjectEntity> 
	{
		/// <summary>CTor</summary>
		public ProjectEntityFactory() : base("ProjectEntity", DB_A4D6F8_AqarPress.Data.EntityType.ProjectEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProjectEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProjectDiscussionEntity objects.</summary>
	[Serializable]
	public partial class ProjectDiscussionEntityFactory : EntityFactoryBase2<ProjectDiscussionEntity> 
	{
		/// <summary>CTor</summary>
		public ProjectDiscussionEntityFactory() : base("ProjectDiscussionEntity", DB_A4D6F8_AqarPress.Data.EntityType.ProjectDiscussionEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProjectDiscussionEntity(fields); }
	}

	/// <summary>Factory to create new, empty ProjectSubCategoryTableEntity objects.</summary>
	[Serializable]
	public partial class ProjectSubCategoryTableEntityFactory : EntityFactoryBase2<ProjectSubCategoryTableEntity> 
	{
		/// <summary>CTor</summary>
		public ProjectSubCategoryTableEntityFactory() : base("ProjectSubCategoryTableEntity", DB_A4D6F8_AqarPress.Data.EntityType.ProjectSubCategoryTableEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new ProjectSubCategoryTableEntity(fields); }
	}

	/// <summary>Factory to create new, empty RoleEntity objects.</summary>
	[Serializable]
	public partial class RoleEntityFactory : EntityFactoryBase2<RoleEntity> 
	{
		/// <summary>CTor</summary>
		public RoleEntityFactory() : base("RoleEntity", DB_A4D6F8_AqarPress.Data.EntityType.RoleEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new RoleEntity(fields); }
	}

	/// <summary>Factory to create new, empty SubCategoryEntity objects.</summary>
	[Serializable]
	public partial class SubCategoryEntityFactory : EntityFactoryBase2<SubCategoryEntity> 
	{
		/// <summary>CTor</summary>
		public SubCategoryEntityFactory() : base("SubCategoryEntity", DB_A4D6F8_AqarPress.Data.EntityType.SubCategoryEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new SubCategoryEntity(fields); }
	}

	/// <summary>Factory to create new, empty UserEntity objects.</summary>
	[Serializable]
	public partial class UserEntityFactory : EntityFactoryBase2<UserEntity> 
	{
		/// <summary>CTor</summary>
		public UserEntityFactory() : base("UserEntity", DB_A4D6F8_AqarPress.Data.EntityType.UserEntity, false) { }
		/// <inheritdoc/>
		protected override IEntity2 CreateImpl(IEntityFields2 fields) { return new UserEntity(fields); }
	}

	/// <summary>Factory to create new, empty Entity objects based on the entity type specified. Uses  entity specific factory objects</summary>
	[Serializable]
	public partial class GeneralEntityFactory
	{
		/// <summary>Creates a new, empty Entity object of the type specified</summary>
		/// <param name="entityTypeToCreate">The entity type to create.</param>
		/// <returns>A new, empty Entity object.</returns>
		public static IEntity2 Create(DB_A4D6F8_AqarPress.Data.EntityType entityTypeToCreate)
		{
			var factoryToUse = EntityFactoryFactory.GetFactory(entityTypeToCreate);
			IEntity2 toReturn = null;
			if(factoryToUse != null)
			{
				toReturn = factoryToUse.Create();
			}
			return toReturn;
		}		
	}
		
	/// <summary>Class which is used to obtain the entity factory based on the .NET type of the entity. </summary>
	[Serializable]
	public static class EntityFactoryFactory
	{
		private static Dictionary<Type, IEntityFactory2> _factoryPerType = new Dictionary<Type, IEntityFactory2>();

		/// <summary>Initializes the <see cref="EntityFactoryFactory"/> class.</summary>
		static EntityFactoryFactory()
		{
			foreach(int entityTypeValue in Enum.GetValues(typeof(DB_A4D6F8_AqarPress.Data.EntityType)))
			{
				var factory = GetFactory((DB_A4D6F8_AqarPress.Data.EntityType)entityTypeValue);
				_factoryPerType.Add(factory.ForEntityType ?? factory.Create().GetType(), factory);
			}
		}

		/// <summary>Gets the factory of the entity with the .NET type specified</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>factory to use or null if not found</returns>
		public static IEntityFactory2 GetFactory(Type typeOfEntity) { return _factoryPerType.GetValue(typeOfEntity); }

		/// <summary>Gets the factory of the entity with the DB_A4D6F8_AqarPress.Data.EntityType specified</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>factory to use or null if not found</returns>
		public static IEntityFactory2 GetFactory(DB_A4D6F8_AqarPress.Data.EntityType typeOfEntity)
		{
			switch(typeOfEntity)
			{
				case DB_A4D6F8_AqarPress.Data.EntityType.AdEntity:
					return new AdEntityFactory();
				case DB_A4D6F8_AqarPress.Data.EntityType.AreaEntity:
					return new AreaEntityFactory();
				case DB_A4D6F8_AqarPress.Data.EntityType.AttachmentEntity:
					return new AttachmentEntityFactory();
				case DB_A4D6F8_AqarPress.Data.EntityType.CategoryEntity:
					return new CategoryEntityFactory();
				case DB_A4D6F8_AqarPress.Data.EntityType.DeveloperEntity:
					return new DeveloperEntityFactory();
				case DB_A4D6F8_AqarPress.Data.EntityType.ProjectEntity:
					return new ProjectEntityFactory();
				case DB_A4D6F8_AqarPress.Data.EntityType.ProjectDiscussionEntity:
					return new ProjectDiscussionEntityFactory();
				case DB_A4D6F8_AqarPress.Data.EntityType.ProjectSubCategoryTableEntity:
					return new ProjectSubCategoryTableEntityFactory();
				case DB_A4D6F8_AqarPress.Data.EntityType.RoleEntity:
					return new RoleEntityFactory();
				case DB_A4D6F8_AqarPress.Data.EntityType.SubCategoryEntity:
					return new SubCategoryEntityFactory();
				case DB_A4D6F8_AqarPress.Data.EntityType.UserEntity:
					return new UserEntityFactory();
				default:
					return null;
			}
		}
	}
		
	/// <summary>Element creator for creating project elements from somewhere else, like inside Linq providers.</summary>
	public class ElementCreator : ElementCreatorBase, IElementCreator2
	{
		/// <summary>Gets the factory of the Entity type with the DB_A4D6F8_AqarPress.Data.EntityType value passed in</summary>
		/// <param name="entityTypeValue">The entity type value.</param>
		/// <returns>the entity factory of the entity type or null if not found</returns>
		public IEntityFactory2 GetFactory(int entityTypeValue) { return (IEntityFactory2)this.GetFactoryImpl(entityTypeValue); }
		
		/// <summary>Gets the factory of the Entity type with the .NET type passed in</summary>
		/// <param name="typeOfEntity">The type of entity.</param>
		/// <returns>the entity factory of the entity type or null if not found</returns>
		public IEntityFactory2 GetFactory(Type typeOfEntity) { return (IEntityFactory2)this.GetFactoryImpl(typeOfEntity); }

		/// <summary>Creates a new resultset fields object with the number of field slots reserved as specified</summary>
		/// <param name="numberOfFields">The number of fields.</param>
		/// <returns>ready to use resultsetfields object</returns>
		public IEntityFields2 CreateResultsetFields(int numberOfFields) { return new ResultsetFields(numberOfFields); }
		
		/// <inheritdoc/>
		public override IInheritanceInfoProvider ObtainInheritanceInfoProviderInstance() { return ModelInfoProviderSingleton.GetInstance(); }

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand) { return new DynamicRelation(leftOperand); }

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand, JoinHint joinType, DerivedTableDefinition rightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, rightOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(IEntityFieldCore leftOperand, JoinHint joinType, DerivedTableDefinition rightOperand, string aliasLeftOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, rightOperand, aliasLeftOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(DerivedTableDefinition leftOperand, JoinHint joinType, string rightOperandEntityName, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, (DB_A4D6F8_AqarPress.Data.EntityType)Enum.Parse(typeof(DB_A4D6F8_AqarPress.Data.EntityType), rightOperandEntityName, false), aliasRightOperand, onClause);
		}

		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(string leftOperandEntityName, JoinHint joinType, string rightOperandEntityName, string aliasLeftOperand, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation((DB_A4D6F8_AqarPress.Data.EntityType)Enum.Parse(typeof(DB_A4D6F8_AqarPress.Data.EntityType), leftOperandEntityName, false), joinType, (DB_A4D6F8_AqarPress.Data.EntityType)Enum.Parse(typeof(DB_A4D6F8_AqarPress.Data.EntityType), rightOperandEntityName, false), aliasLeftOperand, aliasRightOperand, onClause);
		}
		
		/// <inheritdoc/>
		public override IDynamicRelation CreateDynamicRelation(IEntityFieldCore leftOperand, JoinHint joinType, string rightOperandEntityName, string aliasLeftOperand, string aliasRightOperand, IPredicate onClause)
		{
			return new DynamicRelation(leftOperand, joinType, (DB_A4D6F8_AqarPress.Data.EntityType)Enum.Parse(typeof(DB_A4D6F8_AqarPress.Data.EntityType), rightOperandEntityName, false), aliasLeftOperand, aliasRightOperand, onClause);
		}
		
		/// <inheritdoc/>
		protected override IEntityFactoryCore GetFactoryImpl(int entityTypeValue) { return EntityFactoryFactory.GetFactory((DB_A4D6F8_AqarPress.Data.EntityType)entityTypeValue); }

		/// <inheritdoc/>
		protected override IEntityFactoryCore GetFactoryImpl(Type typeOfEntity) { return EntityFactoryFactory.GetFactory(typeOfEntity);	}

	}
}
