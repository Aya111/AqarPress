//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.5.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using DB_A4D6F8_AqarPress.Data.HelperClasses;
using DB_A4D6F8_AqarPress.Data.FactoryClasses;
using DB_A4D6F8_AqarPress.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace DB_A4D6F8_AqarPress.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END

	/// <summary>Entity class which represents the entity 'Attachment'.<br/><br/></summary>
	[Serializable]
	public partial class AttachmentEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END
	
	{
		private ProjectDiscussionEntity _projectDiscussion;
		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END

		private static AttachmentEntityStaticMetaData _staticMetaData = new AttachmentEntityStaticMetaData();
		private static AttachmentRelations _relationsFactory = new AttachmentRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name ProjectDiscussion</summary>
			public static readonly string ProjectDiscussion = "ProjectDiscussion";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class AttachmentEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public AttachmentEntityStaticMetaData()
			{
				SetEntityCoreInfo("AttachmentEntity", InheritanceHierarchyType.None, false, (int)DB_A4D6F8_AqarPress.Data.EntityType.AttachmentEntity, typeof(AttachmentEntity), typeof(AttachmentEntityFactory), false);
				AddNavigatorMetaData<AttachmentEntity, ProjectDiscussionEntity>("ProjectDiscussion", "Attachments", (a, b) => a._projectDiscussion = b, a => a._projectDiscussion, (a, b) => a.ProjectDiscussion = b, DB_A4D6F8_AqarPress.Data.RelationClasses.StaticAttachmentRelations.ProjectDiscussionEntityUsingProjectDiscussionIdStatic, ()=>new AttachmentRelations().ProjectDiscussionEntityUsingProjectDiscussionId, null, new int[] { (int)AttachmentFieldIndex.ProjectDiscussionId }, null, true, (int)DB_A4D6F8_AqarPress.Data.EntityType.ProjectDiscussionEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static AttachmentEntity()
		{
		}

		/// <summary> CTor</summary>
		public AttachmentEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public AttachmentEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this AttachmentEntity</param>
		public AttachmentEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Attachment which data should be fetched into this Attachment object</param>
		public AttachmentEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for Attachment which data should be fetched into this Attachment object</param>
		/// <param name="validator">The custom validator object for this AttachmentEntity</param>
		public AttachmentEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected AttachmentEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'ProjectDiscussion' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProjectDiscussion() { return CreateRelationInfoForNavigator("ProjectDiscussion"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this AttachmentEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END


			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static AttachmentRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProjectDiscussion' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProjectDiscussion { get { return _staticMetaData.GetPrefetchPathElement("ProjectDiscussion", CommonEntityBase.CreateEntityCollection<ProjectDiscussionEntity>()); } }

		/// <summary>The Comment property of the Entity Attachment<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Attachments"."comment".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 500.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String Comment
		{
			get { return (System.String)GetValue((int)AttachmentFieldIndex.Comment, true); }
			set	{ SetValue((int)AttachmentFieldIndex.Comment, value); }
		}

		/// <summary>The Id property of the Entity Attachment<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Attachments"."id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)AttachmentFieldIndex.Id, true); }
			set { SetValue((int)AttachmentFieldIndex.Id, value); }		}

		/// <summary>The Path property of the Entity Attachment<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Attachments"."path".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Path
		{
			get { return (System.String)GetValue((int)AttachmentFieldIndex.Path, true); }
			set	{ SetValue((int)AttachmentFieldIndex.Path, value); }
		}

		/// <summary>The ProjectDiscussionId property of the Entity Attachment<br/><br/></summary>
		/// <remarks>Mapped on  table field: "Attachments"."project_discussion_id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual Nullable<System.Int32> ProjectDiscussionId
		{
			get { return (Nullable<System.Int32>)GetValue((int)AttachmentFieldIndex.ProjectDiscussionId, false); }
			set	{ SetValue((int)AttachmentFieldIndex.ProjectDiscussionId, value); }
		}

		/// <summary>Gets / sets related entity of type 'ProjectDiscussionEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual ProjectDiscussionEntity ProjectDiscussion
		{
			get { return _projectDiscussion; }
			set { SetSingleRelatedEntityNavigator(value, "ProjectDiscussion"); }
		}
		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END


	}
}

namespace DB_A4D6F8_AqarPress.Data
{
	public enum AttachmentFieldIndex
	{
		///<summary>Comment. </summary>
		Comment,
		///<summary>Id. </summary>
		Id,
		///<summary>Path. </summary>
		Path,
		///<summary>ProjectDiscussionId. </summary>
		ProjectDiscussionId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace DB_A4D6F8_AqarPress.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: Attachment. </summary>
	public partial class AttachmentRelations: RelationFactory
	{

		/// <summary>Returns a new IEntityRelation object, between AttachmentEntity and ProjectDiscussionEntity over the m:1 relation they have, using the relation between the fields: Attachment.ProjectDiscussionId - ProjectDiscussion.Id</summary>
		public virtual IEntityRelation ProjectDiscussionEntityUsingProjectDiscussionId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "ProjectDiscussion", false, new[] { ProjectDiscussionFields.Id, AttachmentFields.ProjectDiscussionId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticAttachmentRelations
	{
		internal static readonly IEntityRelation ProjectDiscussionEntityUsingProjectDiscussionIdStatic = new AttachmentRelations().ProjectDiscussionEntityUsingProjectDiscussionId;

		/// <summary>CTor</summary>
		static StaticAttachmentRelations() { }
	}
}
