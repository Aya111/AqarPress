//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.4.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.ComponentModel;
using System.Collections.Generic;
using System.Runtime.Serialization;
using System.Xml.Serialization;
using AqarPress.Data.HelperClasses;
using AqarPress.Data.FactoryClasses;
using AqarPress.Data.RelationClasses;

using SD.LLBLGen.Pro.ORMSupportClasses;

namespace AqarPress.Data.EntityClasses
{
	// __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
	// __LLBLGENPRO_USER_CODE_REGION_END
	/// <summary>Entity class which represents the entity 'User'.<br/><br/></summary>
	[Serializable]
	public partial class UserEntity : CommonEntityBase
		// __LLBLGENPRO_USER_CODE_REGION_START AdditionalInterfaces
		// __LLBLGENPRO_USER_CODE_REGION_END	
	{
		private EntityCollection<ProjectDiscussionEntity> _projectDiscussions;
		private RoleEntity _role;

		// __LLBLGENPRO_USER_CODE_REGION_START PrivateMembers
		// __LLBLGENPRO_USER_CODE_REGION_END
		private static UserEntityStaticMetaData _staticMetaData = new UserEntityStaticMetaData();
		private static UserRelations _relationsFactory = new UserRelations();

		/// <summary>All names of fields mapped onto a relation. Usable for in-memory filtering</summary>
		public static partial class MemberNames
		{
			/// <summary>Member name Role</summary>
			public static readonly string Role = "Role";
			/// <summary>Member name ProjectDiscussions</summary>
			public static readonly string ProjectDiscussions = "ProjectDiscussions";
		}

		/// <summary>Static meta-data storage for navigator related information</summary>
		protected class UserEntityStaticMetaData : EntityStaticMetaDataBase
		{
			public UserEntityStaticMetaData()
			{
				SetEntityCoreInfo("UserEntity", InheritanceHierarchyType.None, false, (int)AqarPress.Data.EntityType.UserEntity, typeof(UserEntity), typeof(UserEntityFactory), false);
				AddNavigatorMetaData<UserEntity, EntityCollection<ProjectDiscussionEntity>>("ProjectDiscussions", a => a._projectDiscussions, (a, b) => a._projectDiscussions = b, a => a.ProjectDiscussions, () => new UserRelations().ProjectDiscussionEntityUsingCommenterId, typeof(ProjectDiscussionEntity), (int)AqarPress.Data.EntityType.ProjectDiscussionEntity);
				AddNavigatorMetaData<UserEntity, RoleEntity>("Role", "Users", (a, b) => a._role = b, a => a._role, (a, b) => a.Role = b, AqarPress.Data.RelationClasses.StaticUserRelations.RoleEntityUsingRoleIdStatic, ()=>new UserRelations().RoleEntityUsingRoleId, null, new int[] { (int)UserFieldIndex.RoleId }, null, true, (int)AqarPress.Data.EntityType.RoleEntity);
			}
		}

		/// <summary>Static ctor</summary>
		static UserEntity()
		{
		}

		/// <summary> CTor</summary>
		public UserEntity()
		{
			InitClassEmpty(null, null);
		}

		/// <summary> CTor</summary>
		/// <param name="fields">Fields object to set as the fields for this entity.</param>
		public UserEntity(IEntityFields2 fields)
		{
			InitClassEmpty(null, fields);
		}

		/// <summary> CTor</summary>
		/// <param name="validator">The custom validator object for this UserEntity</param>
		public UserEntity(IValidator validator)
		{
			InitClassEmpty(validator, null);
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for User which data should be fetched into this User object</param>
		public UserEntity(System.Int32 id) : this(id, null)
		{
		}

		/// <summary> CTor</summary>
		/// <param name="id">PK value for User which data should be fetched into this User object</param>
		/// <param name="validator">The custom validator object for this UserEntity</param>
		public UserEntity(System.Int32 id, IValidator validator)
		{
			InitClassEmpty(validator, null);
			this.Id = id;
		}

		/// <summary>Private CTor for deserialization</summary>
		/// <param name="info"></param>
		/// <param name="context"></param>
		protected UserEntity(SerializationInfo info, StreamingContext context) : base(info, context)
		{
			// __LLBLGENPRO_USER_CODE_REGION_START DeserializationConstructor
			// __LLBLGENPRO_USER_CODE_REGION_END
		}

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entities of type 'ProjectDiscussion' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoProjectDiscussions() { return CreateRelationInfoForNavigator("ProjectDiscussions"); }

		/// <summary>Creates a new IRelationPredicateBucket object which contains the predicate expression and relation collection to fetch the related entity of type 'Role' to this entity.</summary>
		/// <returns></returns>
		public virtual IRelationPredicateBucket GetRelationInfoRole() { return CreateRelationInfoForNavigator("Role"); }
		
		/// <inheritdoc/>
		protected override EntityStaticMetaDataBase GetEntityStaticMetaData() {	return _staticMetaData; }

		/// <summary>Initializes the class members</summary>
		private void InitClassMembers()
		{
			PerformDependencyInjection();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassMembers
			// __LLBLGENPRO_USER_CODE_REGION_END
			OnInitClassMembersComplete();
		}

		/// <summary>Initializes the class with empty data, as if it is a new Entity.</summary>
		/// <param name="validator">The validator object for this UserEntity</param>
		/// <param name="fields">Fields of this entity</param>
		private void InitClassEmpty(IValidator validator, IEntityFields2 fields)
		{
			OnInitializing();
			this.Fields = fields ?? CreateFields();
			this.Validator = validator;
			InitClassMembers();
			// __LLBLGENPRO_USER_CODE_REGION_START InitClassEmpty
			// __LLBLGENPRO_USER_CODE_REGION_END

			OnInitialized();
		}

		/// <summary>The relations object holding all relations of this entity with other entity classes.</summary>
		public static UserRelations Relations { get { return _relationsFactory; } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'ProjectDiscussion' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathProjectDiscussions { get { return _staticMetaData.GetPrefetchPathElement("ProjectDiscussions", CommonEntityBase.CreateEntityCollection<ProjectDiscussionEntity>()); } }

		/// <summary>Creates a new PrefetchPathElement2 object which contains all the information to prefetch the related entities of type 'Role' for this entity.</summary>
		/// <returns>Ready to use IPrefetchPathElement2 implementation.</returns>
		public static IPrefetchPathElement2 PrefetchPathRole { get { return _staticMetaData.GetPrefetchPathElement("Role", CommonEntityBase.CreateEntityCollection<RoleEntity>()); } }

		/// <summary>The DateCreated property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."date_created".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.DateTime DateCreated
		{
			get { return (System.DateTime)GetValue((int)UserFieldIndex.DateCreated, true); }
			set	{ SetValue((int)UserFieldIndex.DateCreated, value); }
		}

		/// <summary>The DeviceToken property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."device_token".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 100.<br/>Table field behavior characteristics (is nullable, is PK, is identity): true, false, false</remarks>
		public virtual System.String DeviceToken
		{
			get { return (System.String)GetValue((int)UserFieldIndex.DeviceToken, true); }
			set	{ SetValue((int)UserFieldIndex.DeviceToken, value); }
		}

		/// <summary>The Id property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, true, true</remarks>
		public virtual System.Int32 Id
		{
			get { return (System.Int32)GetValue((int)UserFieldIndex.Id, true); }
			set	{ SetValue((int)UserFieldIndex.Id, value); }
		}

		/// <summary>The LastLoginDate property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."last_login_date".<br/>Table field type characteristics (type, precision, scale, length): DateTime, 0, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual Nullable<System.DateTime> LastLoginDate
		{
			get { return (Nullable<System.DateTime>)GetValue((int)UserFieldIndex.LastLoginDate, false); }
			set	{ SetValue((int)UserFieldIndex.LastLoginDate, value); }
		}

		/// <summary>The MobilePhone property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."mobile_phone".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 50.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String MobilePhone
		{
			get { return (System.String)GetValue((int)UserFieldIndex.MobilePhone, true); }
			set	{ SetValue((int)UserFieldIndex.MobilePhone, value); }
		}

		/// <summary>The Name property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."name".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 500.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Name
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Name, true); }
			set	{ SetValue((int)UserFieldIndex.Name, value); }
		}

		/// <summary>The Password property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."password".<br/>Table field type characteristics (type, precision, scale, length): NVarChar, 0, 0, 500.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.String Password
		{
			get { return (System.String)GetValue((int)UserFieldIndex.Password, true); }
			set	{ SetValue((int)UserFieldIndex.Password, value); }
		}

		/// <summary>The RoleId property of the Entity User<br/><br/></summary>
		/// <remarks>Mapped on  table field: "User"."role_id".<br/>Table field type characteristics (type, precision, scale, length): Int, 10, 0, 0.<br/>Table field behavior characteristics (is nullable, is PK, is identity): false, false, false</remarks>
		public virtual System.Int32 RoleId
		{
			get { return (System.Int32)GetValue((int)UserFieldIndex.RoleId, true); }
			set	{ SetValue((int)UserFieldIndex.RoleId, value); }
		}

		/// <summary>Gets the EntityCollection with the related entities of type 'ProjectDiscussionEntity' which are related to this entity via a relation of type '1:n'. If the EntityCollection hasn't been fetched yet, the collection returned will be empty.<br/><br/></summary>
		[TypeContainedAttribute(typeof(ProjectDiscussionEntity))]
		public virtual EntityCollection<ProjectDiscussionEntity> ProjectDiscussions { get { return GetOrCreateEntityCollection<ProjectDiscussionEntity, ProjectDiscussionEntityFactory>("User", true, false, ref _projectDiscussions); } }

		/// <summary>Gets / sets related entity of type 'RoleEntity' which has to be set using a fetch action earlier. If no related entity is set for this property, null is returned..<br/><br/></summary>
		[Browsable(false)]
		public virtual RoleEntity Role
		{
			get { return _role; }
			set { SetSingleRelatedEntityNavigator(value, "Role"); }
		}

		// __LLBLGENPRO_USER_CODE_REGION_START CustomEntityCode
		// __LLBLGENPRO_USER_CODE_REGION_END
	}
}

namespace AqarPress.Data
{
	public enum UserFieldIndex
	{
		///<summary>DateCreated. </summary>
		DateCreated,
		///<summary>DeviceToken. </summary>
		DeviceToken,
		///<summary>Id. </summary>
		Id,
		///<summary>LastLoginDate. </summary>
		LastLoginDate,
		///<summary>MobilePhone. </summary>
		MobilePhone,
		///<summary>Name. </summary>
		Name,
		///<summary>Password. </summary>
		Password,
		///<summary>RoleId. </summary>
		RoleId,
		/// <summary></summary>
		AmountOfFields
	}
}

namespace AqarPress.Data.RelationClasses
{
	/// <summary>Implements the relations factory for the entity: User. </summary>
	public partial class UserRelations: RelationFactory
	{
		/// <summary>Returns a new IEntityRelation object, between UserEntity and ProjectDiscussionEntity over the 1:n relation they have, using the relation between the fields: User.Id - ProjectDiscussion.CommenterId</summary>
		public virtual IEntityRelation ProjectDiscussionEntityUsingCommenterId
		{
			get { return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.OneToMany, "ProjectDiscussions", true, new[] { UserFields.Id, ProjectDiscussionFields.CommenterId }); }
		}

		/// <summary>Returns a new IEntityRelation object, between UserEntity and RoleEntity over the m:1 relation they have, using the relation between the fields: User.RoleId - Role.Id</summary>
		public virtual IEntityRelation RoleEntityUsingRoleId
		{
			get	{ return ModelInfoProviderSingleton.GetInstance().CreateRelation(RelationType.ManyToOne, "Role", false, new[] { RoleFields.Id, UserFields.RoleId }); }
		}

	}
	
	/// <summary>Static class which is used for providing relationship instances which are re-used internally for syncing</summary>
	internal static class StaticUserRelations
	{
		internal static readonly IEntityRelation ProjectDiscussionEntityUsingCommenterIdStatic = new UserRelations().ProjectDiscussionEntityUsingCommenterId;
		internal static readonly IEntityRelation RoleEntityUsingRoleIdStatic = new UserRelations().RoleEntityUsingRoleId;

		/// <summary>CTor</summary>
		static StaticUserRelations() { }
	}
}
